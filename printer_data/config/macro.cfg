


  
##########################
### START PRINT GCODE  ###
##########################

[gcode_macro START_PRINT]                                     ####   @@@@@@@  @@@@@@   @@@@@@@   @@@@@     #####
gcode:                                                        ####      @     @        @  @  @   @    @    ##### 
    EXCLUDE_OBJECT_DEFINE                                     ####      @     @@@@     @  @  @   @@@@@     #####
                                                              ####      @     @        @     @   @         #####
                                                              ####      @     @@@@@@   @     @   @         #####
    # Load variables 
    M117 Waiting on bed and extruder
    #M104 S190 # ALSO CAN SET PRINT EXTRUDER TEMP TO PRINT
    #M104 S200 # ALSO CAN SET PRINT EXTRUDER TEMP TO PRINT
    #M104 S210 # ALSO CAN SET PRINT EXTRUDER TEMP TO PRINT
    M104 S220 # ALSO CAN SET PRINT EXTRUDER TEMP TO PRINT
    #M104 S230 # ALSO CAN SET PRINT EXTRUDER TEMP TO PRINT
    
    #M140 S50  # bed temp #
    #M140 S60  # bed temp #
    #M140 S65  # bed temp #
    M140 S70  # bed temp #
    #M140 S80  # bed temp 
    #M140 S90  # bed temp #
    # abl
    G28
    M117 Calibrating bed mesh
    BED_MESH_CALIBRATE
    #M117 Waiting on extruder
    #M109 S{extruder_temp} #if i wont to use defalt firmwar temp
    M117 Purging
    #Voron_Purge
    LINE_PURGE
    M117

    

##############################
### tune
##############################

[gcode_macro pressure_advance_off]
description:
gcode:
    SET_PRESSURE_ADVANCE ADVANCE=0
   

    
[gcode_macro TUNING_TOWER_VELOCITY_LIMIT]
description:
gcode:              
    #TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5
    TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=6000 STEP_DELTA=500 STEP_HEIGHT=5


##########################
###      FAN SPEED     ###
##########################

[gcode_macro FAN_OFF]
description:
gcode:
    # fan 0%
    M106 S0

[gcode_macro FAN_25]
description:
gcode:
    # fan 0%
    M106 S63

[gcode_macro FAN_50]
description:
gcode:
    # fan 50%
    M106 S127  

[gcode_macro FAN_75]
description:
gcode:
    # fan 75%
    M106 S127 S191 

[gcode_macro FAN_FULL]
description:
gcode:
    # fan 100%
    M106 S255   


##########################
### COOLDOWN NOZL/BED  ###
##########################

[gcode_macro COOL_DOWN]
description:
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    #M106 S0



##########################
### Extrude 100mm CALB ###
##########################

[gcode_macro Extrude_100mm]
description: Extrude 100mm 
gcode:
    M109 s180
    #SET_HEATER_TEMPERATURE HEATER=extruder TARGET=180
    M83
    G1 E25 F300
    #SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    M109 s0
    M84

##################################
#### PETG heat bed and nozzle ####
##################################

[gcode_macro PETG_PREHEAT]
description: PETG Heat Bed And Hotend
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(70)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(235)|float %}
    # Start heating 
    M140 S{BED_TEMP}    
    M104 S{EXTRUDER_TEMP}

#################################
#### ABS heat bed and nozzle ####
#################################

[gcode_macro ABS_PREHEAT]
description: ABS Heat Bed And Hotend
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(80)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(230)|float %}
    # Start heating 
    M140 S{BED_TEMP}    
    M104 S{EXTRUDER_TEMP}
  
#################################
#### PLA heat bed and nozzle ####
#################################

[gcode_macro PLA_PREHEAT]
description: PLA Heat Bed And Hotend
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(65)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    # Start bed heating
    M140 S{BED_TEMP}    
    M104 S{EXTRUDER_TEMP}
    #SET_HEATER_TEMPERATURE HEATER=extruder TARGET={BED_TEMP}
    #SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={EXTRUDER_TEMP}

#########################
####### PID BED # #######
#########################

[gcode_macro PID_BED_70]
description: PID Tune for the bed
gcode:
  PID_CALIBRATE HEATER=heater_bed target=70
  TURN_OFF_HEATERS
  SAVE_CONFIG


#########################
###### PID NOZZlE #######
#########################

[gcode_macro PID_200_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=200
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro PID_215_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=215
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro PID_225_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=225
  TURN_OFF_HEATERS
  SAVE_CONFIG

#########################
##### CANCEL PRINT ######
#########################  

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE  



##########################
#### END PRINT GCODE  ####
##########################
    
#[gcode_macro END_PRINT]
#gcode:
    # Turn off bed, extruder, and fan
    #M140 S0
    #M104 S0
    #M106 S0
    # Move nozzle away from print while retracting
    #G91
    #G1 E-3 F300
    ###############G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    #G1 Z10 F3000
    #G28 X F2500
    ###############G28 Y G91 G1 Y+200 F6000
    #G90
    ########################
    #G1 E-2 F200
    #G1 Y200 F2500 ;(moves the extruder to Y200 - bringing the bed forward)
    ########################
    #Disable steppers
    #M84

[gcode_macro END_PRINT]
variable_machine_depth: 235
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Relative positionning
    G91
    # Retract and raise Z
    G1 Z0.2 E-0.2 F2400 #was below
    #G1 Z0.2 E-2 F2400
    # Wipe out
    G1 X5 Y5 F3000
    # Raise Z more
    G1 Z40
    # Absolute positionning
   # G90
    
    G1 E-3.7 F250   # E-0.1 F25
    G90
    G1 Y200 F2500 ;(moves the extruder to Y200 - bringing the bed forward)Present print
    #G1 X0 Y{machine_depth}
    # Disable steppers
    M84
    # Print message on LCD
    M117 That's All Folks

 
#########################
###### eather way #######
#########################

[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}


#########################
######  #######
######################### 

#####################################################
##                      macros                     ##
#####################################################



  ###############################################################################################################
  ###############################################################################################################
  ###############################################################################################################

  



######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.

#[pwm_cycle_time BEEPER_pin]
#pin: ar37
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
#value: 0
#   Silent at power on, set to 1 if active low.
#shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
#cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0


###############################################
#### Filament Change #### Pause and resume ####
###############################################

[pause_resume]

[gcode_macro M600]                                               ###########################################################################
gcode:                                                           ###### M600: Filament Change. This macro will pause the printer, move the #
    {% set X = params.X|default(50)|float %}                     ###### tool to the change position, and retract the filament 50mm. Adjust #
    {% set Y = params.Y|default(0)|float %}                      ###### the retraction settings for your own extruder. After filament has  #
    {% set Z = params.Z|default(10)|float %}                     ###### been changed, the print can be resumed from its previous position  #
    SAVE_GCODE_STATE NAME=M600_state                             ###### with the "RESUME" gcode.                                           #
    PAUSE                                                        ###########################################################################
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

######################################################################################################################################################
# BMP280/BME280/BME680 Environmental Sensor                            #### Note the format of the parameter SENSOR in the macro below.  The BME280 
########################################################################### sensor status can be accessed using the format "bme280 <section_name>".
                                                                       ####
# The macro below assumes you have a BME280 sensor_type defined in one #### The example section above is named "my_sensor", thus the bme280 can be
# of the applicable sections in printer.cfg, such as:                  #### queried as follows:
#                                                                      #### QUERY_BME280 SENSOR='bme280 my_sensor'
#[temperature_sensor my_sensor]                                        ####
#sensor_type: BME280                                                   #### Since a default parameter is defined one could simply enter QUERY_BME280
#gcode_id: AMB                                                         #### as well.
                                                                       ################################################################################


[gcode_macro QUERY_BME280]                                               
gcode:                                                                   
    {% set sensor = printer["bme280 my_sensor"] %}                       
    {action_respond_info(   
        "Temperature: %.2f C\n"                                         
        "Pressure: %.2f hPa\n"                                           
        "Humidity: %.2f%%" % (                                           
            sensor.temperature,       
            sensor.pressure,                                            
            sensor.humidity))}                                           
                                                                         
######################################################################
# HTU21D family Environmental Sensor
######################################################################

# The macro below assumes you have a HTU21D sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: HTU21D
#
# Note the format of the parameter SENSOR in the macro below.  The HTU21D
# sensor status can be accessed using the format "htu21d <section_name>".
# The example section above is named "my_sensor", thus the htu21d can be
# queried as follows:
#
# QUERY_HTU21D SENSOR='htu21d my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_HTU21D
# as well.

[gcode_macro QUERY_HTU21D]
gcode:
    {% set sensor = printer["htu21d my_sensor"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.humidity))}





######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}



######################################################################
# G130: Set digital potentiometer value
######################################################################

[gcode_macro G130]                                                                              ########################################################################
gcode:                                                                                          ### The macro <<<< uses the MCP4018 SET_DIGIPOT command to implement
  M400                                                                                          ### a `G130` as used on classic Mightyboard-based printers such as
  {% if ('X' in params) and ('mcp4018 x_axis_pot' in printer.configfile.config) %}              ### The Makerbot Replicator 2/2X.
    {% set x_value = params['X']|float %}                                                       ###
    {% set x_axis_pot_scale = printer.configfile.config["mcp4018 x_axis_pot"].scale|float %}    ### The `G130` command can be used to lower the stepper current
    SET_DIGIPOT DIGIPOT=x_axis_pot WIPER={ x_axis_pot_scale * (x_value / 127.0)}                ### during preheating and raise the current again prior to starting
  {% endif %}                                                                                   ### the print.  This is necessary for printers with smaller power
  {% if ('Y' in params) and ('mcp4018 y_axis_pot' in printer.configfile.config) %}              ### supplies that needed all the power to heat the bed.
    {% set y_value = params['Y']|float %}                                                       ### 
    {% set y_axis_pot_scale = printer.configfile.config["mcp4018 y_axis_pot"].scale|float %}    ### This macro requires one or more [mcp4018] configuration sections:
    SET_DIGIPOT DIGIPOT=y_axis_pot WIPER={ y_axis_pot_scale * (y_value / 127.0)}                ### (x_axis_pot, y_axis_pot, z_axis_pot, a_axis_pot, b_axis_pot)
  {% endif %}                                                                                   ###
  {% if ('Z' in params) and ('mcp4018 z_axis_pot' in printer.configfile.config) %}              ### Example: G130 X20 Y20 Z20 A20 B20 ; Lower stepper Vrefs while heating
    {% set z_value = params['Z']|float %}                                                       ##############################################################################
    {% set z_axis_pot_scale = printer.configfile.config["mcp4018 z_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=z_axis_pot WIPER={ z_axis_pot_scale * (z_value / 127.0)}
  {% endif %}
  {% if ('A' in params) and ('mcp4018 a_axis_pot' in printer.configfile.config) %}
    {% set a_value = params['A']|float %}
    {% set a_axis_pot_scale = printer.configfile.config["mcp4018 a_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=a_axis_pot WIPER={ a_axis_pot_scale * (a_value / 127.0)}
  {% endif %}
  {% if ('B' in params) and ('mcp4018 b_axis_pot' in printer.configfile.config) %}
    {% set b_value = params['B']|float %}
    {% set b_axis_pot_scale = printer.configfile.config["mcp4018 b_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=b_axis_pot WIPER={ b_axis_pot_scale * (b_value / 127.0)}
  {% endif %}

    #################################################################################################################
    #####                   LINE PURGE
    #################################################################################################################

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Get purge settings from _Kamp_Settings
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
    {% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
    {% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
    {% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
    {% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
    {% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}


    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}

        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}

    {% else %}

        {% if verbose_enable == True %}

        {action_respond_info("Moving filament tip {}mms".format(                                                                 
            (tip_distance),                                                                                      
        )) }
        {% endif %}

        {% if printer.firmware_retraction is defined %}
            {action_respond_info("KAMP purge is using firmware retraction.")}
        {% else %}
            {action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
        {% endif %}

        {% if purge_y_origin > 0 %}
        
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(                                                                 
                (purge_x_center),
                (purge_y_origin),
                (purge_amount),
                (flow_rate),
            )) }
    
        {% else %}
    
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(                                                                 
                (purge_x_origin),
                (purge_y_center),
                (purge_amount),
                (flow_rate),
            )) }

        {% endif %}

        SAVE_GCODE_STATE NAME=Prepurge_State                                                    # Create gcode state

        {% if purge_y_origin > 0 %}                                                             # If there's room on Y, purge along X axis in front of print area

            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_center} Y{purge_y_origin}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}             # Purge line
            {RETRACT}                                                                           # Retract
            G0 X{purge_x_center + purge_amount + 10} F{travel_speed}                            # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed}                                              # Z hop

        {% else %}                                                                              # If there's room on X, purge along Y axis to the left of print area
            
            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_origin} Y{purge_y_center}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}             # Purge line
            {RETRACT}                                                                           # Retract
            G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}                            # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed}                                              # Z hop

        {% endif %}

        RESTORE_GCODE_STATE NAME=Prepurge_State                                                 # Restore gcode state
    
    {% endif %}

